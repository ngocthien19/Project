import tkinter as tk
from tkinter import font
from home import HomePage
from management import ManagementPage
from features import FeaturesPage
from chart import ChartPage

# Thi·∫øt l·∫≠p c√°c bi·∫øn cho layout
window_width = 1200
window_height = 600
sidebar_width = int(window_width * 0.18)
button_width = int(sidebar_width * 0.8)
button_height = 40
button_radius = 15
canvas_width = sidebar_width + 20 
canvas_height = 50
sidebar_padding = 8
title_padding = 10

# Bi·∫øn l∆∞u tr·ªØ tam gi√°c active
active_triangle = None
active_button_canvas = None

# H√†m chuy·ªÉn sang trang kh√°c v√† hi·ªÉn th·ªã n√∫t ƒëang active
def show_frame(frame_name, button_canvas=None):
    global active_triangle, active_button_canvas

    # ·∫®n t·∫•t c·∫£ c√°c khung
    for f in frames.values():
        f.pack_forget()

    # Hi·ªÉn th·ªã khung c·∫ßn hi·ªÉn th·ªã
    frames[frame_name].pack(fill=tk.BOTH, expand=True)
    frames[frame_name].tkraise()  # ƒê∆∞a khung c·∫ßn hi·ªÉn th·ªã l√™n tr√™n c√πng

    # N·∫øu l√† c√°c trang kh√°c, t·∫°o v√† hi·ªÉn th·ªã
    if frame_name == "Management":
        ManagementPage(frames["Management"]) 
        show_frame("Home", button_canvas=sidebar.winfo_children()[1])    
    elif frame_name == "Feature":
        FeaturesPage(frames["Feature"])
        show_frame("Home", button_canvas=sidebar.winfo_children()[1])    
    elif frame_name == "Chart":
        ChartPage(frames["Chart"])
        show_frame("Home", button_canvas=sidebar.winfo_children()[1])    

    # X√≥a tam gi√°c active c≈© n·∫øu c√≥
    if active_triangle and active_button_canvas:
        active_button_canvas.delete(active_triangle)
    
    # T·∫°o tam gi√°c m·ªõi cho n√∫t ƒëang active
    if button_canvas:
        active_triangle = button_canvas.create_polygon(
            20, 25,    # ƒêi·ªÉm tr√°i gi·ªØa
            10, 20,   # ƒê·ªânh tam gi√°c (m≈©i t√™n ch·ªâ sang ph·∫£i)
            10, 30,   # ƒêi·ªÉm ph·∫£i d∆∞·ªõi
            fill="#2980b9", outline=""
        )
        active_button_canvas = button_canvas  # C·∫≠p nh·∫≠t n√∫t active m·ªõi

# H√†m t·∫°o n√∫t bo g√≥c
def create_rounded_button(canvas, x, y, width, height, radius, text="", command=None):
    # T·∫°o h√¨nh d·∫°ng bo g√≥c cho n√∫t
    points = [x + radius, y, x + width - radius, y, x + width, y, x + width, y + radius, 
              x + width, y + height - radius, x + width, y + height, x + width - radius, y + height, 
              x + radius, y + height, x, y + height, x, y + height - radius, x, y + radius, x, y]
    
    # V·∫Ω n√∫t bo g√≥c tr√™n canvas
    button = canvas.create_polygon(points, smooth=True, fill="#FFF", outline="#FFF")

    # G√°n s·ª± ki·ªán click v√†o n√∫t n·∫øu c√≥ l·ªánh
    if command:
        canvas.tag_bind(button, "<Button-1>", lambda e: command())

    # T·∫°o v√† ƒë·∫∑t vƒÉn b·∫£n cho n√∫t ·ªü gi·ªØa
    text_x = x + width / 2
    text_y = y + height / 2
    canvas.create_text(text_x, text_y, text=text, fill="#3498db", font=("Arial", 10, "bold"))

    return button

# T·∫°o hi·ªáu ·ª©ng ƒë·ªïi m√†u cho n√∫t khi hover v√† khi active
def animate_color_and_label(target, start_color, end_color, step=0):
    # T√≠nh to√°n gi√° tr·ªã RGB c·ªßa m√†u m·ªõi d·ª±a tr√™n m√†u b·∫Øt ƒë·∫ßu v√† k·∫øt th√∫c
    r = int(start_color[1:3], 16) + step * (int(end_color[1:3], 16) - int(start_color[1:3], 16)) // 10
    g = int(start_color[3:5], 16) + step * (int(end_color[3:5], 16) - int(start_color[3:5], 16)) // 10
    b = int(start_color[5:7], 16) + step * (int(end_color[5:7], 16) - int(start_color[5:7], 16)) // 10
    new_color = f"#{r:02x}{g:02x}{b:02x}"

    # C·∫≠p nh·∫≠t m√†u cho ƒë·ªëi t∆∞·ª£ng ƒë√≠ch
    if isinstance(target, tk.Canvas):
        canvas_id = target.button_id
        target.itemconfig(canvas_id, fill=new_color)
    elif isinstance(target, tk.Label):
        target.configure(bg=new_color, fg="white" if new_color == "#2980b9" else "#3498db")

    # G·ªçi l·∫°i h√†m sau m·ªôt kho·∫£ng th·ªùi gian ƒë·ªÉ ti·∫øp t·ª•c hi·ªáu ·ª©ng
    if step < 10:
        target.after(7, animate_color_and_label, target, start_color, end_color, step + 1)

def run_main():
    # T·∫°o c·ª≠a s·ªï ch√≠nh
    window = tk.Tk()
    window.title('Animals')
    window.geometry(f"{window_width}x{window_height}")
    window.configure(bg="white")

    # C√°c font ch·ªØ
    title_font = font.Font(family="Arial", size=14, weight="bold")
    button_font = font.Font(family="Arial", size=12, weight="normal")
    header_font = font.Font(family="Arial", size=18, weight="bold")

    # Khung sidebar
    global sidebar
    sidebar = tk.Frame(window, bg="#3498db", width=sidebar_width)
    sidebar.pack(side="left", fill="y")

    # Ti√™u ƒë·ªÅ c·ªßa sidebar
    title_label = tk.Label(sidebar, text="ANIMALS", bg="#2980b9", fg="white", font=header_font)
    title_label.pack(pady=(0, 20), ipady=title_padding, ipadx=(70))

    # Danh s√°ch c√°c n√∫t b√™n sidebar
    buttons = [
        ("Home", "üè†", "#3498db"),
        ("Management", "üêæ", "#3498db"),
        ("Feature", "üîÑ", "#3498db"),
        ("Chart", "üìä", "#3498db"),
    ]

    # T·∫°o c√°c trang n·ªôi dung
    global frames
    frames = {}
    for page in ["Home", "Management", "Feature", "Chart"]:
        frame = tk.Frame(window, bg="white")
        frame.pack(fill=tk.BOTH, expand=True)
        frames[page] = frame

    # T·∫°o trang Home v√† th√™m v√†o frames
    HomePage(frames["Home"])

    # T·∫°o c√°c n√∫t tr√™n sidebar
    for text, icon, color in buttons:
        # Canvas cho n√∫t bo g√≥c
        canvas = tk.Canvas(sidebar, width=canvas_width, height=canvas_height, bg="#3498db", highlightthickness=0)
        canvas.pack(pady=sidebar_padding)

        # T·∫°o n√∫t bo g√≥c
        button_id = create_rounded_button(
            canvas, 
            x=30, 
            y=5, 
            width=button_width, 
            height=button_height, 
            radius=button_radius, 
            text="",
            command=lambda t=text, c=canvas: show_frame(t, c)  # Truy·ªÅn t√™n trang v√†o show_frame
        )
        
        # L∆∞u id c·ªßa n√∫t v√†o canvas
        canvas.button_id = button_id

        # T·∫°o nh√£n ch·ª©a bi·ªÉu t∆∞·ª£ng v√† vƒÉn b·∫£n
        button_label = tk.Label(canvas, text=f"{icon} {text}", bg="#FFF", fg=color, font=button_font)
        button_label.place(x=35, y=12)

        # S·ª± ki·ªán click v√†o button_label ƒë·ªÉ k√≠ch ho·∫°t trang v√† hi·ªáu ·ª©ng active
        button_label.bind("<Button-1>", lambda e, t=text, c=canvas: show_frame(t, c))

        # Hi·ªáu ·ª©ng hover cho n√∫t
        def on_enter(e, button_label=button_label, canvas=canvas):
            animate_color_and_label(canvas, "#ECF0F1", "#2980b9")
            animate_color_and_label(button_label, "#ECF0F1", "#2980b9")
            button_label.config(cursor="hand2")
            canvas.config(cursor="hand2")
            button_label.place(x=45, y=10)

        def on_leave(e, button_label=button_label, canvas=canvas):
            animate_color_and_label(canvas, "#2980b9", "#ECF0F1")
            animate_color_and_label(button_label, "#2980b9", "#ECF0F1")
            button_label.config(cursor="")
            canvas.config(cursor="")
            button_label.place(x=35, y=10)

        # G√°n s·ª± ki·ªán hover cho nh√£n
        button_label.bind("<Enter>", on_enter)
        button_label.bind("<Leave>", on_leave)
        canvas.tag_bind(button_id, "<Enter>", on_enter)
        canvas.tag_bind(button_id, "<Leave>", on_leave)

    # Hi·ªÉn th·ªã trang ƒë·∫ßu ti√™n (Home)
    show_frame("Home", button_canvas=sidebar.winfo_children()[1])

    # Ch·∫°y ·ª©ng d·ª•ng
    window.mainloop()